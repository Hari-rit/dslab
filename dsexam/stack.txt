#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
struct node{
    int data;
    struct node*next;
};
struct node*head=NULL;
void ins_beg(int key){
    struct node*newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=key;
    newnode->next=NULL;
    if (head==NULL){
        head=newnode;
    }
    else{
        newnode->next=head;
        head=newnode;
    }
}
void del_beg(){
    struct node*temp=head;
    if (head==NULL){
        printf("\nList is empty\n");
        return;
    }
    if(head->next==NULL){
        printf("\n%d deleted\n",head->data);
        free(head);
        head=NULL;
        return;
    }
    if(head->next!=NULL){
        head=head->next;
        temp->next=NULL;
        printf("\n%d deleted\n",temp->data);
        free(temp);
        return;
    }
}
void search(int key){
    int count=0,pos=1;
    struct node*temp=head;
    while(temp!=NULL)
    if(key==temp->data){
        count++;
        printf("\n%d Element found at pos %d",temp->data,pos);
        break;
    }
    else{
        pos++;
        temp=temp->next;
    }
}
void display(){
    if (head==NULL){
        printf("\nList is empty\n");
        return;
    }
    struct node*temp=head;
    while(temp!=NULL){
        printf("%d\t",temp->data);
        temp=temp->next;
    }
}
void main(){
    int ch;
    while (1)
    {
        printf("\n1.ENQUEUE\n2.DEQUEUE\n3.DISPLAY\n4.SEARCH\n5.EXIT\n\nENTER YOUR CHOICE:");
        scanf("%d",&ch);
        switch (ch)
        {
        case 1:
            int item;
            printf("\nEnter the element to be inserted");
            scanf("%d",&item);
            ins_beg(item);
            break;
            
            case 2:
            del_beg();
            break;
            
            case 3:
            display();
            break;
            case 4:
            int ser;
            printf("\nEnter the element to be searched");
            scanf ("%d",&ser);
            search(ser);
            break;
            case 5:
            printf("\nExiting....");
            exit(0);
            break;

        default:
            printf("\nInvalid choice!");
            break;
        }
    }
}